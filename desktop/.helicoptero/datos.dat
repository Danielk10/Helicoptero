{pantallaCompleta:false,numeroNivel:7,volumenMusica:0,volumenSonido:0,leerDatosAsset:false,puntuaciones:[225,200,175,100,90,55,45,45,25,10],estadoPuntuaciones:[Pierde,Pierde,Pierde,Pierde,Pierde,Pierde,Pierde,Pierde,Pierde,Pierde],numeroNivelPuntuaciones:[Nivel 2,Nivel 2,Nivel 2,Nivel 2,Nivel 2,Nivel 2,Nivel 2,Nivel 2,Nivel 2,Nivel 2],puntos:300,helicoptero:4,misiles:50,bombas:50,numeroSatelite:1,continuar:true,posicionActores:[[],[{class:com.badlogic.gdx.math.Vector2,x:463.99997,y:378}],[],[],[],[],[{class:com.badlogic.gdx.math.Vector2,x:406.99997,y:212.99998}],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],tipoActores:[[],[{class:java.lang.String,value:com.diamon.personaje.CajaHelicopteroMedico}],[],[],[],[],[{class:java.lang.String,value:com.diamon.personaje.AntiAereo}],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]}